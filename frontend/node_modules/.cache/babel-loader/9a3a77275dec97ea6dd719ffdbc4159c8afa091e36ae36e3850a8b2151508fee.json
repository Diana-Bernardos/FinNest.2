{"ast":null,"code":"var _jsxFileName = \"/Users/diana/Desktop/FinNest.2/frontend/src/context/SyncContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from 'react';\nimport apiService from '../services/api';\n\n// Crear el contexto de sincronización\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SyncContext = /*#__PURE__*/createContext();\n\n// Proveedor de sincronización\nexport const SyncProvider = ({\n  children\n}) => {\n  _s();\n  const [isSyncing, setIsSyncing] = useState(false); // Estado para indicar si se está sincronizando\n  const [syncError, setSyncError] = useState(null); // Estado para manejar errores de sincronización\n\n  // Función para sincronizar los ahorros\n  const syncSavings = async () => {\n    setIsSyncing(true); // Indicar que la sincronización está en curso\n    setSyncError(null); // Limpiar errores anteriores\n\n    try {\n      // Obtener los ahorros locales del localStorage\n      const localSavings = JSON.parse(localStorage.getItem('savings') || '[]');\n\n      // Recorrer los ahorros locales\n      for (let saving of localSavings) {\n        if (saving.status === 'pendiente') {\n          try {\n            // Sincronizar el ahorro con el servidor\n            const syncedSaving = await apiService.savings.create(saving);\n\n            // Actualizar el ahorro local con la respuesta del servidor\n            const updatedLocalSavings = localSavings.map(s => s.id === saving.id ? syncedSaving : s);\n\n            // Guardar los ahorros actualizados en el localStorage\n            localStorage.setItem('savings', JSON.stringify(updatedLocalSavings));\n          } catch (syncError) {\n            console.error('Error sincronizando saving:', syncError);\n            setSyncError('Error al sincronizar un ahorro. Inténtalo de nuevo.');\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error en sincronización:', error);\n      setSyncError('Error general en la sincronización. Inténtalo de nuevo.');\n    } finally {\n      setIsSyncing(false); // Indicar que la sincronización ha terminado\n    }\n  };\n\n  // Sincronizar automáticamente al montar el componente\n  useEffect(() => {\n    syncSavings();\n  }, []);\n\n  // Función para forzar la sincronización manualmente\n  const forceSync = async () => {\n    await syncSavings();\n  };\n\n  // Valor del contexto\n  const contextValue = {\n    isSyncing,\n    // Estado de sincronización\n    syncError,\n    // Error de sincronización\n    forceSync // Función para forzar la sincronización\n  };\n  return /*#__PURE__*/_jsxDEV(SyncContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(SyncProvider, \"X2xdRm3ctkyDvUPaB9t/b8jktJA=\");\n_c = SyncProvider;\nvar _c;\n$RefreshReg$(_c, \"SyncProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","apiService","jsxDEV","_jsxDEV","SyncContext","SyncProvider","children","_s","isSyncing","setIsSyncing","syncError","setSyncError","syncSavings","localSavings","JSON","parse","localStorage","getItem","saving","status","syncedSaving","savings","create","updatedLocalSavings","map","s","id","setItem","stringify","console","error","forceSync","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/diana/Desktop/FinNest.2/frontend/src/context/SyncContext.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nimport apiService from '../services/api';\n\n// Crear el contexto de sincronización\nexport const SyncContext = createContext();\n\n// Proveedor de sincronización\nexport const SyncProvider = ({ children }) => {\n  const [isSyncing, setIsSyncing] = useState(false); // Estado para indicar si se está sincronizando\n  const [syncError, setSyncError] = useState(null); // Estado para manejar errores de sincronización\n\n  // Función para sincronizar los ahorros\n  const syncSavings = async () => {\n    setIsSyncing(true); // Indicar que la sincronización está en curso\n    setSyncError(null); // Limpiar errores anteriores\n\n    try {\n      // Obtener los ahorros locales del localStorage\n      const localSavings = JSON.parse(localStorage.getItem('savings') || '[]');\n\n      // Recorrer los ahorros locales\n      for (let saving of localSavings) {\n        if (saving.status === 'pendiente') {\n          try {\n            // Sincronizar el ahorro con el servidor\n            const syncedSaving = await apiService.savings.create(saving);\n\n            // Actualizar el ahorro local con la respuesta del servidor\n            const updatedLocalSavings = localSavings.map(s =>\n              s.id === saving.id ? syncedSaving : s\n            );\n\n            // Guardar los ahorros actualizados en el localStorage\n            localStorage.setItem('savings', JSON.stringify(updatedLocalSavings));\n          } catch (syncError) {\n            console.error('Error sincronizando saving:', syncError);\n            setSyncError('Error al sincronizar un ahorro. Inténtalo de nuevo.');\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error en sincronización:', error);\n      setSyncError('Error general en la sincronización. Inténtalo de nuevo.');\n    } finally {\n      setIsSyncing(false); // Indicar que la sincronización ha terminado\n    }\n  };\n\n  // Sincronizar automáticamente al montar el componente\n  useEffect(() => {\n    syncSavings();\n  }, []);\n\n  // Función para forzar la sincronización manualmente\n  const forceSync = async () => {\n    await syncSavings();\n  };\n\n  // Valor del contexto\n  const contextValue = {\n    isSyncing, // Estado de sincronización\n    syncError, // Error de sincronización\n    forceSync, // Función para forzar la sincronización\n  };\n\n  return (\n    <SyncContext.Provider value={contextValue}>\n      {children}\n    </SyncContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACjE,OAAOC,UAAU,MAAM,iBAAiB;;AAExC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElD;EACA,MAAMY,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9BH,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpBE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEpB,IAAI;MACF;MACA,MAAME,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;;MAExE;MACA,KAAK,IAAIC,MAAM,IAAIL,YAAY,EAAE;QAC/B,IAAIK,MAAM,CAACC,MAAM,KAAK,WAAW,EAAE;UACjC,IAAI;YACF;YACA,MAAMC,YAAY,GAAG,MAAMnB,UAAU,CAACoB,OAAO,CAACC,MAAM,CAACJ,MAAM,CAAC;;YAE5D;YACA,MAAMK,mBAAmB,GAAGV,YAAY,CAACW,GAAG,CAACC,CAAC,IAC5CA,CAAC,CAACC,EAAE,KAAKR,MAAM,CAACQ,EAAE,GAAGN,YAAY,GAAGK,CACtC,CAAC;;YAED;YACAT,YAAY,CAACW,OAAO,CAAC,SAAS,EAAEb,IAAI,CAACc,SAAS,CAACL,mBAAmB,CAAC,CAAC;UACtE,CAAC,CAAC,OAAOb,SAAS,EAAE;YAClBmB,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEpB,SAAS,CAAC;YACvDC,YAAY,CAAC,qDAAqD,CAAC;UACrE;QACF;MACF;IACF,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDnB,YAAY,CAAC,yDAAyD,CAAC;IACzE,CAAC,SAAS;MACRF,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB;EACF,CAAC;;EAED;EACAV,SAAS,CAAC,MAAM;IACda,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMmB,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMnB,WAAW,CAAC,CAAC;EACrB,CAAC;;EAED;EACA,MAAMoB,YAAY,GAAG;IACnBxB,SAAS;IAAE;IACXE,SAAS;IAAE;IACXqB,SAAS,CAAE;EACb,CAAC;EAED,oBACE5B,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAA1B,QAAA,EACvCA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC/B,EAAA,CA/DWF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}