{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\n\n// Configuración base de Axios\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Servicios de Ahorros\nexport const savingsService = {\n  create: async savingData => {\n    try {\n      // Validar y formatear los datos\n      const targetDate = new Date(savingData.target_date);\n      if (isNaN(targetDate.getTime())) {\n        throw new Error('Fecha inválida');\n      }\n      const data = {\n        goal_name: String(savingData.goal_name).trim(),\n        target_amount: Number(savingData.target_amount) || 0,\n        current_amount: Number(savingData.current_amount || 0),\n        target_date: targetDate.toISOString().split('T')[0]\n      };\n      console.log('Sending data to server:', data);\n      const response = await api.post('/savings', data);\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      console.error('Error creating saving:', {\n        originalData: savingData,\n        error: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data\n      });\n      throw error;\n    }\n  },\n  getAll: async () => {\n    try {\n      const response = await api.get('/savings');\n      if (!response.data || !response.data.savings) {\n        throw new Error('La respuesta del backend no contiene datos válidos.');\n      }\n      return Array.isArray(response.data.savings) ? response.data.savings : [];\n    } catch (error) {\n      console.error('Error obteniendo ahorros:', error);\n      return [];\n    }\n  },\n  update: async (id, updateData) => {\n    try {\n      const transformedData = {\n        goal_name: String(updateData.goalName).trim(),\n        target_amount: Number(updateData.targetAmount) || 0,\n        current_amount: Number(updateData.currentAmount || 0),\n        target_date: new Date(updateData.targetDate).toISOString().split('T')[0]\n      };\n      const response = await api.put(`/savings/${id}`, transformedData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating saving:', error);\n      throw error;\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/savings/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting saving:', error);\n      throw error;\n    }\n  }\n};\n\n// Servicios de Gastos\nexport const expensesService = {\n  create: async expenseData => {\n    try {\n      const {\n        date,\n        amount,\n        category,\n        description\n      } = expenseData;\n      if (!date || !amount || !category) {\n        throw new Error('Todos los campos son requeridos');\n      }\n      const expenseDate = new Date(date);\n      if (isNaN(expenseDate.getTime())) {\n        throw new Error('La fecha no es válida');\n      }\n      const data = {\n        date: expenseDate.toISOString().split('T')[0],\n        amount: parseFloat(amount),\n        category: String(category).trim(),\n        description: String(description || '').trim()\n      };\n      console.log('Sending expense data to server:', data);\n      const response = await api.post('/expenses', data);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      console.error('Error creating expense:', {\n        originalData: expenseData,\n        error: error.message,\n        response: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n      });\n      throw error;\n    }\n  },\n  getAll: async () => {\n    try {\n      const response = await api.get('/expenses');\n      if (!response.data || !response.data.expenses) {\n        throw new Error('La respuesta del backend no contiene datos válidos.');\n      }\n      return Array.isArray(response.data.expenses) ? response.data.expenses : [];\n    } catch (error) {\n      console.error('Error obteniendo gastos:', error);\n      return [];\n    }\n  },\n  update: async (id, updateData) => {\n    try {\n      const response = await api.put(`/expenses/${id}`, updateData);\n      return response.data;\n    } catch (error) {\n      console.error('Error actualizando gasto:', error);\n      throw error;\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/expenses/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error eliminando gasto:', error);\n      throw error;\n    }\n  }\n};\n// Servicios de Análisis\nexport const analysisService = {\n  getMonthlySummary: async () => {\n    try {\n      const response = await api.get('/analysis/monthly-summary');\n      if (!response.data) {\n        throw new Error('La respuesta del servidor no contiene datos.');\n      }\n      return response.data; // Devuelve los datos JSON\n    } catch (error) {\n      console.error('Error obteniendo resumen mensual:', error);\n      throw new Error('No se pudo obtener el resumen mensual.');\n    }\n  },\n  getCategoryBreakdown: async () => {\n    try {\n      const response = await api.get('/expenses/analysis/by-category');\n      if (!response.data) {\n        throw new Error('La respuesta del servidor no contiene datos.');\n      }\n      return response.data; // Devuelve los datos JSON\n    } catch (error) {\n      console.error('Error obteniendo desglose por categoría:', error);\n      throw new Error('No se pudo obtener el desglose por categoría.');\n    }\n  }\n};\n\n// Utilidades\nexport const utilService = {\n  // Formateo de moneda\n  formatCurrency: amount => {\n    return new Intl.NumberFormat('es-CL', {\n      style: 'currency',\n      currency: 'CLP'\n    }).format(amount);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","savingsService","savingData","targetDate","Date","target_date","isNaN","getTime","Error","data","goal_name","String","trim","target_amount","Number","current_amount","toISOString","split","console","log","response","post","error","_error$response","originalData","message","getAll","get","savings","Array","isArray","update","id","updateData","transformedData","goalName","targetAmount","currentAmount","put","delete","expensesService","expenseData","date","amount","category","description","expenseDate","parseFloat","_error$response2","expenses","analysisService","getMonthlySummary","getCategoryBreakdown","utilService","formatCurrency","Intl","NumberFormat","style","currency","format"],"sources":["/Users/diana/Desktop/FinNest.2/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\nimport axios from 'axios';\n\n// Configuración base de Axios\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Servicios de Ahorros\nexport const savingsService = {\n  create: async (savingData) => {\n    try {\n      // Validar y formatear los datos\n      const targetDate = new Date(savingData.target_date);\n      if (isNaN(targetDate.getTime())) {\n        throw new Error('Fecha inválida');\n      }\n\n      const data = {\n        goal_name: String(savingData.goal_name).trim(),\n        target_amount: Number(savingData.target_amount) || 0,\n        current_amount: Number(savingData.current_amount || 0),\n        target_date: targetDate.toISOString().split('T')[0],\n      };\n\n      console.log('Sending data to server:', data);\n\n      const response = await api.post('/savings', data);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating saving:', {\n        originalData: savingData,\n        error: error.message,\n        response: error.response?.data,\n      });\n      throw error;\n    }\n  },\n  getAll: async () => {\n    try {\n      const response = await api.get('/savings');\n      if (!response.data || !response.data.savings) {\n        throw new Error('La respuesta del backend no contiene datos válidos.');\n      }\n      return Array.isArray(response.data.savings)\n        ? response.data.savings\n        : [];\n    } catch (error) {\n      console.error('Error obteniendo ahorros:', error);\n      return [];\n    }\n  },\n  update: async (id, updateData) => {\n    try {\n      const transformedData = {\n        goal_name: String(updateData.goalName).trim(),\n        target_amount: Number(updateData.targetAmount) || 0,\n        current_amount: Number(updateData.currentAmount || 0),\n        target_date: new Date(updateData.targetDate).toISOString().split('T')[0],\n      };\n      const response = await api.put(`/savings/${id}`, transformedData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating saving:', error);\n      throw error;\n    }\n  },\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/savings/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting saving:', error);\n      throw error;\n    }\n  },\n};\n\n// Servicios de Gastos\nexport const expensesService = {\n  create: async (expenseData) => {\n    try {\n      const { date, amount, category, description } = expenseData;\n      if (!date || !amount || !category) {\n        throw new Error('Todos los campos son requeridos');\n      }\n      const expenseDate = new Date(date);\n      if (isNaN(expenseDate.getTime())) {\n        throw new Error('La fecha no es válida');\n      }\n      const data = {\n        date: expenseDate.toISOString().split('T')[0],\n        amount: parseFloat(amount),\n        category: String(category).trim(),\n        description: String(description || '').trim(),\n      };\n      console.log('Sending expense data to server:', data);\n      const response = await api.post('/expenses', data);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating expense:', {\n        originalData: expenseData,\n        error: error.message,\n        response: error.response?.data,\n      });\n      throw error;\n    }\n  },\n  getAll: async () => {\n    try {\n      const response = await api.get('/expenses');\n      if (!response.data || !response.data.expenses) {\n        throw new Error('La respuesta del backend no contiene datos válidos.');\n      }\n      return Array.isArray(response.data.expenses)\n        ? response.data.expenses\n        : [];\n    } catch (error) {\n      console.error('Error obteniendo gastos:', error);\n      return [];\n    }\n  },\n  update: async (id, updateData) => {\n    try {\n      const response = await api.put(`/expenses/${id}`, updateData);\n      return response.data;\n    } catch (error) {\n      console.error('Error actualizando gasto:', error);\n      throw error;\n    }\n  },\n  delete: async (id) => {\n    try {\n      const response = await api.delete(`/expenses/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error eliminando gasto:', error);\n      throw error;\n    }\n  },\n};\n// Servicios de Análisis\nexport const analysisService = {\n  getMonthlySummary: async () => {\n    try {\n      const response = await api.get('/analysis/monthly-summary');\n      if (!response.data) {\n        throw new Error('La respuesta del servidor no contiene datos.');\n      }\n      return response.data; // Devuelve los datos JSON\n    } catch (error) {\n      console.error('Error obteniendo resumen mensual:', error);\n      throw new Error('No se pudo obtener el resumen mensual.');\n    }\n  },\n  getCategoryBreakdown: async () => {\n    try {\n      const response = await api.get('/expenses/analysis/by-category');\n      if (!response.data) {\n        throw new Error('La respuesta del servidor no contiene datos.');\n      }\n      return response.data; // Devuelve los datos JSON\n    } catch (error) {\n      console.error('Error obteniendo desglose por categoría:', error);\n      throw new Error('No se pudo obtener el desglose por categoría.');\n    }\n  }\n};\n\n// Utilidades\nexport const utilService = {\n  // Formateo de moneda\n  formatCurrency: (amount) => {\n    return new Intl.NumberFormat('es-CL', {\n      style: 'currency',\n      currency: 'CLP'\n    }).format(amount);\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}